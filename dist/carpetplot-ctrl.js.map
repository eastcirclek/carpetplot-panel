{"version":3,"sources":["../src/carpetplot-ctrl.js"],"names":["MetricsPanelCtrl","_","contextSrv","kbn","createConverter","aggregates","aggregatesMap","fragments","fragmentsMap","canvasRendering","carpetplotOptionsEditor","panelDefaults","aggregate","AVG","fragment","TWENTYFOUR","color","colorScheme","nullColor","scale","min","max","xAxis","show","showCrosshair","yAxis","tooltip","legend","data","decimals","processing","percentage","template","update","colorSchemes","name","value","invert","CarpetPlotCtrl","$scope","$injector","$rootScope","timeSrv","variableSrv","onDataReceived","dataList","transformData","render","onInitEditMode","addEditorTab","unitFormats","getUnitFormats","onRender","variableNames","map","variables","fragmentOptions","aggregateOptions","theme","user","lightTheme","defaultsDeep","panel","events","on","converter","range","timeRange","from","to","convertData","scope","elem","attrs","ctrl","templateUrl"],"mappings":"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","file":"carpetplot-ctrl.js","sourcesContent":["import { MetricsPanelCtrl } from 'app/plugins/sdk';\nimport _ from 'lodash';\nimport { contextSrv } from 'app/core/core';\nimport kbn from 'app/core/utils/kbn';\n\nimport createConverter from './data-converter';\nimport aggregates, { aggregatesMap } from './aggregates';\nimport fragments, { fragmentsMap } from './fragments';\nimport canvasRendering from './canvas/rendering';\nimport { carpetplotOptionsEditor } from './options-editor';\nimport './css/carpet-plot.css!';\n\nconst panelDefaults = {\n  aggregate: aggregates.AVG,\n  fragment: fragments.TWENTYFOUR,\n  color: {\n    colorScheme: 'interpolateRdYlGn',\n    nullColor: 'transparent'\n  },\n  scale: {\n    min: null,\n    max: null\n  },\n  xAxis: {\n    show: true,\n    showCrosshair: true\n  },\n  yAxis: {\n    show: true,\n    showCrosshair: false\n  },\n  tooltip: {\n    show: true\n  },\n  legend: {\n    show: true\n  },\n  data: {\n    decimals: null,\n    processing: 'none',\n    percentage: false\n  },\n  template: {\n    update: false\n  }\n};\n\nconst colorSchemes = [\n  // Diverging\n  { name: 'Spectral', value: 'interpolateSpectral', invert: 'always' },\n  { name: 'RdYlGn', value: 'interpolateRdYlGn', invert: 'always' },\n\n  // Sequential (Single Hue)\n  { name: 'Blues', value: 'interpolateBlues', invert: 'dark' },\n  { name: 'Greens', value: 'interpolateGreens', invert: 'dark' },\n  { name: 'Greys', value: 'interpolateGreys', invert: 'dark' },\n  { name: 'Oranges', value: 'interpolateOranges', invert: 'dark' },\n  { name: 'Purples', value: 'interpolatePurples', invert: 'dark' },\n  { name: 'Reds', value: 'interpolateReds', invert: 'dark' },\n\n  // Sequential (Multi-Hue)\n  { name: 'BuGn', value: 'interpolateBuGn', invert: 'dark' },\n  { name: 'BuPu', value: 'interpolateBuPu', invert: 'dark' },\n  { name: 'GnBu', value: 'interpolateGnBu', invert: 'dark' },\n  { name: 'OrRd', value: 'interpolateOrRd', invert: 'dark' },\n  { name: 'PuBuGn', value: 'interpolatePuBuGn', invert: 'dark' },\n  { name: 'PuBu', value: 'interpolatePuBu', invert: 'dark' },\n  { name: 'PuRd', value: 'interpolatePuRd', invert: 'dark' },\n  { name: 'RdPu', value: 'interpolateRdPu', invert: 'dark' },\n  { name: 'YlGnBu', value: 'interpolateYlGnBu', invert: 'dark' },\n  { name: 'YlGn', value: 'interpolateYlGn', invert: 'dark' },\n  { name: 'YlOrBr', value: 'interpolateYlOrBr', invert: 'dark' },\n  { name: 'YlOrRd', value: 'interpolateYlOrRd', invert: 'darm' }\n];\n\nexport class CarpetPlotCtrl extends MetricsPanelCtrl {\n  static templateUrl = 'module.html';\n\n  constructor($scope, $injector, $rootScope, timeSrv, variableSrv) {\n    super($scope, $injector);\n\n    this.dataList = null;\n    this.data = {};\n    this.timeSrv = timeSrv;\n    this.variableSrv = variableSrv;\n    this.variableNames = _.map(variableSrv.variables, 'name');\n    this.colorSchemes = colorSchemes;\n    this.fragmentOptions = fragmentsMap;\n    this.aggregateOptions = aggregatesMap;\n    this.theme = contextSrv.user.lightTheme ? 'light' : 'dark';\n\n    _.defaultsDeep(this.panel, panelDefaults);\n\n    this.events.on('data-received', this.onDataReceived);\n    this.events.on('data-snapshot-load', this.onDataReceived);\n    this.events.on('init-edit-mode', this.onInitEditMode);\n    this.events.on('render', this.onRender);\n  }\n\n  onDataReceived = (dataList) => {\n    this.dataList = dataList;\n    this.data = this.transformData(dataList);\n    this.render();\n  }\n\n  onInitEditMode = () => {\n    this.addEditorTab('Options', carpetplotOptionsEditor, 2);\n    this.unitFormats = kbn.getUnitFormats();\n  }\n\n  onRender = () => {\n    if (!this.dataList) { return; }\n    this.data = this.transformData(this.dataList);\n  }\n\n  transformData(data) {\n    const converter = createConverter(this.panel.aggregate, this.panel.fragment);\n    const { from, to } = this.range || this.timeSrv.timeRange();\n    return converter.convertData(from, to, data, this.panel.data.processing);\n  }\n\n  link(scope, elem, attrs, ctrl) {\n    canvasRendering(scope, elem, attrs, ctrl);\n  }\n}"]}